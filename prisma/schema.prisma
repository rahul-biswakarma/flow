generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String?             @unique
  emailVerified      DateTime?           @map("email_verified")
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  sessions           Session[]
  projectMemberships ProjectMembership[]
  userRoles          UserRole[]

  @@map("users")
}

model Project {
  id             String              @id @default(cuid())
  name           String
  description    String?
  slug           String              @unique
  config         String              @default("{}")
  roles          Role[]
  projectMembers ProjectMembership[]
  pages          Page[]
  components     Component[]
  invitations    Invitation[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([id])
}

model Role {
  id          String     @id @default(cuid())
  name        String
  description String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([projectId])
}

model UserRole {
  userId      String
  roleId      String
  permissions Permissions[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
  @@index([userId])
}

model ProjectMembership {
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@index([projectId])
}

model Page {
  id          String    @id @default(cuid())
  name        String
  config      Json
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  path        String
  description String?
  title       String?
  seo         SeoModel? @relation(fields: [seoModelId], references: [id])
  seoModelId  String?

  @@index([projectId])
  @@index([seoModelId])
}

model SeoModel {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Page        Page[]
}

model Component {
  id        String   @id @default(cuid())
  name      String
  config    Json
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, projectId])
  @@index([projectId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Invitation {
  id        String          @id @default(cuid())
  email     String
  projectId String
  role      String
  state     InvitationState
  expires   DateTime
  project   Project         @relation(fields: [projectId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([projectId])
}

enum InvitationState {
  PENDING
  ACCEPTED
  REJECTED
}

enum ProjectState {
  ACTIVE
  INACTIVE
  DELETED
  PENDING
}

enum UserState {
  ACTIVE
  INACTIVE
  DELETED
  PENDING
}

enum Permissions {
  CREATE_NODES
  DELETE_NODES
  UPDATE_NODES
  READ_NODES
}

enum Atoms {
  CONTAINER
  TEXT
  IMAGE
  BUTTON
  INPUT
  FORM
}
